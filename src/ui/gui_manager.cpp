/**
 * @file gui_manager.cpp
 * @brief Implementation of the GuiManager class for managing the GUI using
 * ImGui and SDL.
 *
 * This file contains the implementation of the GuiManager class methods which
 * are responsible for initializing the ImGui context, handling new frame setup,
 * rendering the GUI, processing SDL events, and properly shutting down ImGui.
 */

#include "../../include/ui/gui_manager.h"

/**
 * @brief Constructs a new GuiManager object.
 *
 * Initializes the internal IO pointer to nullptr.
 */
GuiManager::GuiManager() : io(nullptr) {}

/**
 * @brief Destructs the GuiManager object.
 *
 * Automatically calls shutdown() to ensure that all ImGui resources are
 * properly released.
 */
GuiManager::~GuiManager() { shutdown(); }

/**
 * @brief Initializes the GUI manager.
 *
 * Sets up the ImGui context and configures it for use with SDL and the
 * SDL_Renderer. This includes checking the ImGui version, creating a context,
 * configuring styles, and initializing the SDL implementations for ImGui.
 *
 * @param window Pointer to the SDL_Window used for rendering.
 * @param renderer Pointer to the SDL_Renderer used for rendering.
 * @return true if initialization was successful.
 */
bool GuiManager::initialize(SDL_Window *window, SDL_Renderer *renderer) {
  IMGUI_CHECKVERSION();   ///< Verify ImGui version compatibility.
  ImGui::CreateContext(); ///< Create a new ImGui context.
  io =
      &ImGui::GetIO(); ///< Retrieve the IO interface for further configuration.

  ImGui::StyleColorsDark(); ///< Apply the dark theme to ImGui.

  // Initialize the SDL2 and SDL_Renderer bindings for ImGui.
  ImGui_ImplSDL2_InitForSDLRenderer(window, renderer);
  ImGui_ImplSDLRenderer2_Init(renderer);

  return true;
}

/**
 * @brief Prepares a new ImGui frame.
 *
 * Sets up a new frame by resetting the frame state for both the SDL_Renderer
 * and SDL2 implementations of ImGui, then starts a new ImGui frame.
 */
void GuiManager::newFrame() {
  ImGui_ImplSDLRenderer2_NewFrame(); ///< Start a new frame for the
                                     ///< SDL_Renderer.
  ImGui_ImplSDL2_NewFrame();         ///< Start a new frame for SDL2.
  ImGui::NewFrame();                 ///< Begin a new ImGui frame.
}

/**
 * @brief Renders the current ImGui frame.
 *
 * Uses the provided SDL_Renderer to render the draw data generated by ImGui.
 *
 * @param renderer Pointer to the SDL_Renderer that will render the ImGui draw
 * data.
 */
void GuiManager::render(SDL_Renderer *renderer) {
  ImGui_ImplSDLRenderer2_RenderDrawData(ImGui::GetDrawData(), renderer);
}

/**
 * @brief Shuts down the GUI manager.
 *
 * Cleans up all ImGui resources by shutting down the SDL_Renderer and SDL2
 * implementations and destroying the ImGui context.
 */
void GuiManager::shutdown() {
  ImGui_ImplSDLRenderer2_Shutdown(); ///< Shutdown the SDL_Renderer
                                     ///< implementation for ImGui.
  ImGui_ImplSDL2_Shutdown(); ///< Shutdown the SDL2 implementation for ImGui.
  ImGui::DestroyContext();   ///< Destroy the ImGui context to free resources.
}

/**
 * @brief Processes an SDL event for ImGui.
 *
 * Passes the SDL event to ImGui for processing, enabling proper GUI input
 * handling.
 *
 * @param event A constant reference to the SDL_Event to process.
 */
void GuiManager::processEvent(const SDL_Event &event) {
  ImGui_ImplSDL2_ProcessEvent(&event);
}

